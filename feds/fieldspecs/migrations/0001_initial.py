# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-14 15:36
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('businessareas', '0001_initial'),
        ('fieldsettings', '0001_initial'),
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailableFieldSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_setting_params', jsonfield.fields.JSONField(blank=True, default={}, help_text='JSON parameters to initialize the field setting.')),
                ('field_setting', models.ForeignKey(help_text='A setting the field can have.', on_delete=django.db.models.deletion.CASCADE, to='fieldsettings.FieldSetting')),
            ],
        ),
        migrations.CreateModel(
            name='FieldSpec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of this field specification.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of this field specification.')),
                ('field_type', models.CharField(choices=[('pk', 'Primary key'), ('fk', 'Foreign key'), ('text', 'Text'), ('zip', 'Zip code'), ('phone', 'Phone'), ('email', 'Email address'), ('date', 'Date'), ('choice', 'Choice from a list'), ('currency', 'Currency'), ('int', 'Integer')], help_text='Field type', max_length=10)),
                ('field_spec_params', jsonfield.fields.JSONField(blank=True, default={}, help_text='Parameters for this field specification. JSON.')),
            ],
        ),
        migrations.CreateModel(
            name='NotionalTableMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_order', models.IntegerField(help_text='Order of the field in the notional table.')),
                ('field_spec', models.ForeignKey(help_text='Field in notional table.', on_delete=django.db.models.deletion.CASCADE, to='fieldspecs.FieldSpec')),
                ('notional_table', models.ForeignKey(help_text='Notional table the field is in.', on_delete=django.db.models.deletion.CASCADE, to='businessareas.NotionalTable')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectFieldSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting_params', jsonfield.fields.JSONField(blank=True, default={}, help_text='JSON parameters for this field setting, for this project.')),
                ('available_field_setting', models.ForeignKey(help_text='Available field setting the data is for.', on_delete=django.db.models.deletion.CASCADE, to='fieldspecs.AvailableFieldSetting')),
                ('project', models.ForeignKey(help_text='Project the setting data is for.', on_delete=django.db.models.deletion.CASCADE, to='projects.Project')),
            ],
        ),
        migrations.AddField(
            model_name='fieldspec',
            name='notional_tables',
            field=models.ManyToManyField(related_name='fieldspecs_fieldspec_related_notional_tables', through='fieldspecs.NotionalTableMembership', to='businessareas.NotionalTable'),
        ),
        migrations.AddField(
            model_name='fieldspec',
            name='possible_field_settings',
            field=models.ManyToManyField(help_text='Settings that this field specification can have.', related_name='possible_settings', through='fieldspecs.AvailableFieldSetting', to='fieldsettings.FieldSetting'),
        ),
        migrations.AddField(
            model_name='availablefieldsetting',
            name='field_spec',
            field=models.ForeignKey(help_text='Field that can have the setting.', on_delete=django.db.models.deletion.CASCADE, to='fieldspecs.FieldSpec'),
        ),
    ]
